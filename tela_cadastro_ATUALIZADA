package com.example.parkinglots

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import android.content.Intent
import android.text.Editable
import android.text.TextWatcher
import android.text.method.PasswordTransformationMethod
import android.widget.Button
import android.widget.EditText
import android.widget.Switch
import android.widget.TextView
import android.widget.Toast
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore

class tela_cadastro : AppCompatActivity() {

    private lateinit var mAuth: FirebaseAuth
    private lateinit var db: FirebaseFirestore

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_tela_cadastro)

        // Inicialização do Firebase Auth e Firestore
        mAuth = FirebaseAuth.getInstance()
        db = FirebaseFirestore.getInstance()

        var Senha: EditText = findViewById(R.id.editTextTextPassword)
        var VSenha: Switch = findViewById(R.id.switch1)
        var Senha2: EditText = findViewById(R.id.edtConfirmar)
        var VSenha2: Switch = findViewById(R.id.switch2)
        var txtEntrar = findViewById<TextView>(R.id.txtEntrar)
        var edtNome: EditText = findViewById(R.id.edtNomeCadastro)
        var edtSobrenome: EditText = findViewById(R.id.edtSobrenome)
        var edtEmail: EditText = findViewById(R.id.EdtEmailCadastro)
        val edtContato: EditText = findViewById(R.id.edtContato)
        edtContato.addTextChangedListener(PhoneNumberFormattingTextWatcher(edtContato))
        var Cadastro: Button = findViewById(R.id.btnCriarCadastro)

        txtEntrar.setOnClickListener { TelaLogin() }

        Cadastro.setOnClickListener {
            val inputText = edtNome.text.toString().trim()
            val inputText2 = edtSobrenome.text.toString().trim()
            val inputText3 = edtEmail.text.toString().trim()
            val inputText4 = edtContato.text.toString().trim()
            val inputText5 = Senha.text.toString().trim()
            val inputText6 = Senha2.text.toString().trim()
            val nome = edtNome.text.toString()
            val sobrenome = edtSobrenome.text.toString()
            val email = edtEmail.text.toString()
            val numero = edtContato.text.toString()

            if (inputText5 != inputText6) {
                Toast.makeText(this, "Verifique se as senhas estão iguais.", Toast.LENGTH_SHORT).show()
            } else if (inputText.isEmpty() || inputText2.isEmpty() || inputText3.isEmpty() || inputText4.isEmpty() || inputText5.isEmpty() || inputText6.isEmpty()) {
                Toast.makeText(this, "Preencha corretamente os campos acima,", Toast.LENGTH_SHORT).show()
            } else {
                // Chama o método para registrar o usuário no Firebase
                registerUser(nome, sobrenome, email, numero, inputText5)

                // Mantenha o código original no último else
                val intent = Intent(this, MainActivity::class.java)
                intent.putExtra("NOME", nome)
                intent.putExtra("SOBRENOME", sobrenome)
                intent.putExtra("EMAIL", email)
                intent.putExtra("NUMERO", numero)
                startActivity(intent)
            }
        }

        VSenha.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                Senha.transformationMethod = null
            } else {
                Senha.transformationMethod = PasswordTransformationMethod.getInstance()
            }
        }
        Senha.addTextChangedListener(object : TextWatcher {
            override fun afterTextChanged(s: Editable?) {}

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                val selectionStart: Int = Senha.selectionStart
                val selectionEnd: Int = Senha.selectionEnd
                Senha.transformationMethod =
                    if (VSenha.isChecked) null else PasswordTransformationMethod.getInstance()
                Senha.setSelection(selectionStart, selectionEnd)
            }
        })
        VSenha2.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                Senha2.transformationMethod = null
            } else {
                Senha2.transformationMethod = PasswordTransformationMethod.getInstance()
            }
        }
        Senha2.addTextChangedListener(object : TextWatcher {
            override fun afterTextChanged(s: Editable?) {}

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                val selectionStart: Int = Senha2.selectionStart
                val selectionEnd: Int = Senha2.selectionEnd
                Senha2.transformationMethod =
                    if (VSenha2.isChecked) null else PasswordTransformationMethod.getInstance()
                Senha2.setSelection(selectionStart, selectionEnd)
            }
        })
    }

    fun TelaLogin() {
        startActivity(Intent(this, MainActivity::class.java))
    }

    private fun registerUser(nome: String, sobrenome: String, email: String, numero: String, password: String) {
        mAuth.createUserWithEmailAndPassword(email, password)
            .addOnCompleteListener(this) { task ->
                if (task.isSuccessful) {
                    val user = mAuth.currentUser
                    user?.let {
                        saveUserData(it.uid, nome, sobrenome, email, numero)
                    }
                } else {
                    Toast.makeText(this, "Registration failed: ${task.exception?.message}", Toast.LENGTH_SHORT).show()
                }
            }
    }

    private fun saveUserData(userId: String, nome: String, sobrenome: String, email: String, numero: String) {
        val user = User(nome, sobrenome, email, numero)
        db.collection("users").document(userId).set(user)
            .addOnSuccessListener {
                Toast.makeText(this, "Registration successful", Toast.LENGTH_SHORT).show()
            }
            .addOnFailureListener { e ->
                Toast.makeText(this, "Failed to save user data: $e", Toast.LENGTH_SHORT).show()
            }
    }

    data class User(
        val nome: String = "",
        val sobrenome: String = "",
        val email: String = "",
        val numero: String = ""
    )

    class PhoneNumberFormattingTextWatcher(private val edtContato: EditText) : TextWatcher {
        private var isFormatting: Boolean = false

        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}

        override fun afterTextChanged(editable: Editable?) {
            if (isFormatting) {
                return
            }

            isFormatting = true

            val phoneNumber = editable.toString().replace("[^\\d]".toRegex(), "")

            // Aplica a máscara de telefone
            if (phoneNumber.length >= 11) {
                val formattedPhoneNumber = "(${phoneNumber.substring(0, 2)}) ${phoneNumber.substring(2, 7)}-${phoneNumber.substring(7)}"
                edtContato.setText(formattedPhoneNumber)
                edtContato.setSelection(formattedPhoneNumber.length)
            }

            isFormatting = false
        }
    }
}
